"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.11.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =====================================================
# SECURITY CONFIGURATION
# =====================================================
# SECURITY WARNING: keep the secret key used in production secret!
# Default solo per sviluppo locale
SECRET_KEY = config('SECRET_KEY', default="django-insecure-^_mm@qbj)t7)ac(_0x==7gj@0h78@!nswtc!4l%1i=xzw!6859" if config('DEBUG', default=True, cast=bool) else None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Hosts permessi - più specifici in produzione
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    '.onrender.com',
    '.up.railway.app',
    '.render.com',
    'tesi2025.netlify.app',
]

# Aggiungi il dominio di produzione se specificato
PRODUCTION_HOST = config('PRODUCTION_HOST', default=None)
if PRODUCTION_HOST:
    ALLOWED_HOSTS.append(PRODUCTION_HOST)

# =====================================================
# APPLICATION DEFINITION
# =====================================================
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "storages",
    # Le tue app
    "core", 
    "users",
    "jobs",
    "models_history",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# =====================================================
# REST FRAMEWORK & JWT CONFIGURATION
# =====================================================
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

SIMPLE_JWT = {
    # ✅ Durata dei token ottimizzata
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),         # 1 ora
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),         # 7 giorni
    
    # ✅ Rotation per sicurezza
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    # ✅ Configurazione algoritmo
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JSON_ENCODER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    
    # ✅ Claims
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    # ✅ Token types
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    # ✅ Claims personalizzati
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=60),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# =====================================================
# CORS CONFIGURATION - SICURA
# =====================================================
FRONTEND_URL = config('FRONTEND_URL', default=None)

# CORS Origins - differenziati per ambiente
if DEBUG:
    # Sviluppo - permissivo
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:5173",      # Vite dev server
        "http://localhost:8080", 
        "http://127.0.0.1:5173",
        "http://127.0.0.1:8080",
        "http://0.0.0.0:8080",
    ]
    CORS_ALLOW_ALL_ORIGINS = True
else:
    # Produzione - restrittivo
    CORS_ALLOWED_ORIGINS = [
        "https://tesi2025.netlify.app",
    ]
    CORS_ALLOW_ALL_ORIGINS = False

# Aggiungi frontend URL se definita
if FRONTEND_URL and FRONTEND_URL.strip():
    CORS_ALLOWED_ORIGINS.append(FRONTEND_URL)

# Headers permessi per JWT
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CORS per credenziali
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"

# =====================================================
# DATABASE CONFIGURATION - SICURA
# =====================================================
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='postgres' if DEBUG else None),
        'USER': config('DB_USER', default='postgres.muvnrrcpfsqimwzkjzpz' if DEBUG else None),
        'PASSWORD': config('DB_PASSWORD', default='**Tfd4Pu?a*yAi!' if DEBUG else None),
        'HOST': config('DB_HOST', default='aws-0-eu-west-3.pooler.supabase.com' if DEBUG else None),
        'PORT': config('DB_PORT', default='6543'),
        'OPTIONS': {
            'sslmode': 'require' if not DEBUG else 'prefer',  # SSL solo in produzione
        },
    }
}


# settings.py
# settings.py
AUTH_USER_MODEL = 'users.CustomUser'  # Sostituisci 'users' con il nome reale

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# =====================================================
# SECURITY HEADERS (PRODUZIONE)
# =====================================================
if not DEBUG:
    # HTTPS enforcement - COMMENTATO per Railway
    # SECURE_HSTS_SECONDS = 31536000  # 1 anno
    # SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    # SECURE_HSTS_PRELOAD = True
    
    # Secure cookies - COMMENTATO per Railway
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
    
    # Redirect HTTP to HTTPS - COMMENTATO per Railway
    # SECURE_SSL_REDIRECT = True
    
    # Content Security
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_BROWSER_XSS_FILTER = True
    X_FRAME_OPTIONS = 'DENY'

# =====================================================
# INTERNATIONALIZATION
# =====================================================
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# =====================================================
# STATIC FILES CONFIGURATION
# =====================================================
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# =====================================================
# LOGGING CONFIGURATION
# =====================================================
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple',
        },
    },
    'loggers': {
        'models_history': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'rest_framework_simplejwt': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# =====================================================
# CELERY CONFIGURATION - SICURA
# =====================================================
CELERY_BROKER_URL = config('REDIS_URL', default="redis://default:CItpjCfWaaRXFjLClIEkXeKrfVdAPWKM@trolley.proxy.rlwy.net:31412" if DEBUG else None)
CELERY_RESULT_BACKEND = config('REDIS_URL', default="redis://default:CItpjCfWaaRXFjLClIEkXeKrfVdAPWKM@trolley.proxy.rlwy.net:31412" if DEBUG else None)

# Serializzazione
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# Timeout e retry
CELERY_TASK_TIME_LIMIT = 300  # 5 minuti
CELERY_TASK_SOFT_TIME_LIMIT = 240  # 4 minuti
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 1

# Auto-discovery dei task
CELERY_AUTODISCOVER_TASKS = True

# Configurazione delle code
CELERY_TASK_DEFAULT_QUEUE = 'celery'
CELERY_TASK_ROUTES = {
    'jobs.tasks.*': {'queue': 'default'},
}

# Configurazione Redis specifica
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_BROKER_CONNECTION_MAX_RETRIES = 10

# Timezone
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True

# =====================================================
# SUPABASE STORAGE CONFIGURATION - SICURA
# =====================================================
AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID', default="608260a0a7cbc9e29a5b4211ed38c3a4" if DEBUG else None)
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY', default="c0ad804d9b224b13e39b68610e06b3bd99c3b787426d38f07f4a0ab615eba20b" if DEBUG else None)

# Configurazione endpoint e bucket
AWS_S3_ENDPOINT_URL = config('AWS_S3_ENDPOINT_URL', default="https://muvnrrcpfsqimwzkjzpz.supabase.co/storage/v1/s3" if DEBUG else None)
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME', default="project-files" if DEBUG else None)
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME', default='us-east-1')
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_LOCATION = ""

# URL pubblico per servire i file
SUPABASE_PROJECT_ID = config('SUPABASE_PROJECT_ID', default="muvnrrcpfsqimwzkjzpz" if DEBUG else None)
AWS_S3_CUSTOM_DOMAIN = f"{SUPABASE_PROJECT_ID}.supabase.co/storage/v1/object/public/{AWS_STORAGE_BUCKET_NAME}"

# Configurazione per bucket pubblico
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}
AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_AUTH = False
AWS_S3_VERIFY = True

# Configurazione STORAGES (Django 4.2+)
STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedStaticFilesStorage",
    },
}

# Supabase config
SUPABASE_URL = config('SUPABASE_URL', default="https://muvnrrcpfsqimwzkjzpz.supabase.co" if DEBUG else None)
SUPABASE_ANON_KEY = config('SUPABASE_ANON_KEY', default="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im11dm5ycmNwZnNxaW13emtqenB6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk3MjYyODcsImV4cCI6MjA2NTMwMjI4N30.kxJxG8WQ-COxeUd4nlYC5D2pVVjTuD44k0MOAPXmrRc" if DEBUG else None)

# URL per servire i media files
MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# =====================================================
# HEALTH CHECK ENDPOINT
# =====================================================
HEALTH_CHECK_URL = '/health/'